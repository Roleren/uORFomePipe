
#' Get the Genomic transcript format, currently using GRch38 data
getGTF = function(assignIt = TRUE){
  if(exists("Gtf") == FALSE) {
    print("loading human GTF GRch38")
    Gtf = loadTxdb(gtfdb)
    if(assignIt)
      assign("Gtf",Gtf,envir = .GlobalEnv)
  } else if(!dbIsValid(Gtf$conn)) {
    Gtf = loadTxdb(Gtf$conn@dbname)
    assign("Gtf",Gtf,envir = .GlobalEnv)
  }
}

#' Get transcripts from gtf
getTx <- function(assignIt = TRUE){
  if (exists("tx",mode = "S4") == F) {
    if (file.exists(p(dataFolder, "/tx.rds"))) {
      tx <- readRDS(p(dataFolder, "/tx.rds"))
    } else {
      getGTF()
      tx <- loadRegion(Gtf)
    }
    if (assignIt) {
      assign("tx",tx, envir = .GlobalEnv)
      return(tx)
    } else {
      return(tx)
    }
  }
}

#Get the coding sequences from the gtf file
getCDS = function(assignIt = TRUE){
  if (exists("cds", mode = "S4") == FALSE) {
    if (file.exists(p(dataFolder, "/cds.rds"))) {
      cds <- readRDS(p(dataFolder, "/cds.rds"))
    } else {
      getGTF()
      cds <- loadRegion(Gtf, "cds")
    }
    if (assignIt) {
      assign("cds", cds, envir = .GlobalEnv)
      return(cds)
    } else {
      return(cds)
    }
  }
}

#Get the 3' sequences from the gtf file
getThreeUTRs <- function(){
  if (!exists("threeUTRs", mode = "S4")) {
    if (!file.exists(p(dataFolder, "/threeUTRs.rds"))) {
      getGTF()
      threeUTRs = threeUTRsByTranscript(Gtf, use.names = TRUE)
    } else {
      threeUTRs <- readRDS(p(dataFolder, "/threeUTRs.rds"))
    }
    assign("threeUTRs", threeUTRs, envir = .GlobalEnv)
  }
}

#' Get the 5' leaders, either from gtf, cage data to reassign
#' the transcription start site(TSS), or load from existing data
#' either as .rdata or .bed (bed6)
getLeaders <- function(cageName = NULL, assignLeader = TRUE, exportUorfRegions = TRUE) {
  if(exists("fiveUTRs") == F) {
    if (file.exists(p(dataFolder,"/fiveUTRs.rds"))) {
      fiveUTRs <- readRDS(p(dataFolder,"/fiveUTRs.rds"))
    } else stop("Could not find leaders")

    if (!is.null(cageName)) {
      print("Using cage.. ")

      fiveUTRs = ORFik::reassignTSSbyCage(fiveUTRs, cageName, filterValue = 3)
      if (exportUorfRegions) {
        getCDS()
        uORFSeachRegion <- ORFik:::addCdsOnLeaderEnds(fiveUTRs, cds)
        uORFSeachRegion <- sortPerGroup(uORFSeachRegion)
        print("exporting new uorf regions")
        exportNamerdata = paste0(regionUORFsFolder,
                                 basename(p(cageName, ".regionUORF.rds")))
        save(uORFSeachRegion, file = exportNamerdata)
      }

      print("exporting new leaders")
      exportNamerdataLeader = paste0(leadersFolder,
                               basename(p(cageName, ".leader.rds")))
      saveRDS(fiveUTRs,file = exportNamerdataLeader)
      print("finished new 5' UTRs")
    }
  }
  else{
    print("fiveUTRs already exists! cancel if this is wrong!")
  }

  if(assignLeader)
    assign("fiveUTRs", fiveUTRs, envir = .GlobalEnv)

  print("finished loading leaders")
}

leaderCage <- function(with.cds = TRUE){
  if(with.cds)
    return(readRDS(p(dataFolder,"/CageFiveUTRsWithCDS.rds")))
  return(readRDS(p(dataFolder,"/CageFiveUTRs.rds")))
}

#' Get the fasta indexed file
#'
#' if assignIt is TRUE, the object is not return to local scope
#' Only assigned to globalenvir
getFasta = function(filePath = NULL, assignIt = T){

  if(exists("fa") == F){ #index files
    if (is.null(filePath)){
      fa = FaFile(faiName)
    } else {
      fa = FaFile(filePath)
    }
    if (assignIt){
      assign("fa",fa,envir = .GlobalEnv)
    } else {
      return(fa)
    }
  }
}

#' Get all annotation parts
#' leader, cds, threeUTRs and tx
#' @param include.cage logical T
#' @param cdsOnFiveEnd logical F
#' @export
getAll <- function(include.cage = T, cdsOnFiveEnd = F){
  getFasta()
  getLeaders(); getCDS(); getThreeUTRs()
  #or with extension
  if (include.cage) {
    cageFiveUTRs <- leaderCage(cdsOnFiveEnd)
    assign("cageFiveUTRs", cageFiveUTRs,  envir = .GlobalEnv)
    getCageTx()
  } else getTx(T)

  return(invisible(NULL))
}

getCageTx <- function() {
  if (file.exists(p(dataFolder, "/cageTx.rdata"))) {
    load(p(dataFolder, "/cageTx.rdata"), envir = .GlobalEnv)
  } else {
    tx <- getTx()
    cageFiveUTRs <- leaderCage()
    tx[names(cageFiveUTRs)] <- ORFik:::extendLeaders(tx, cageFiveUTRs)
    assign("tx", tx,  envir = .GlobalEnv)
    save(tx, file = p(dataFolder, "/cageTx.rdata"))
  }
  return(NULL)
}
