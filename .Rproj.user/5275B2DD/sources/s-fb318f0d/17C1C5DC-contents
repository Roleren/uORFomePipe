#' Get sequence features from orfik
#'@param organism scientifi name, example "Homo sapiens" or "Danio rerio"
#'@param biomart name of biomart for organism, example "hsapiens_gene_ensembl"
#'or "drerio_gene_ensembl"
getSequenceFeatures <- function(organism, biomart) {
  if(!tableNotExists("kozak") & !tableNotExists("gcContent")) {
    print("sequence features exist, stop if wrong!")
    return(NULL)
  }
  message("Creating sequence features from uORFs")
  grl <- uORFomePipe:::getUorfsInDb()
  uORFomePipe:::getAll()

  # kozak
  kozak <- kozakSequenceScore(grl, tx, fa)
  dt <- data.table(kozak = kozak)
  insertTable(dt, "kozak")
  # distORFCDS
  distORFCDS <- distToCds(grl, cageFiveUTRs, cds)
  insertTable(data.table(distORFCDS = distORFCDS), "distORFCDS")
  # distORFTSS
  distORFTSS <- distToTSS(grl, cageFiveUTRs)
  insertTable(data.table(distORFTSS = distORFTSS), "distORFTSS")
  # fractionLengths
  tx_len <- ORFik:::widthPerGroup(tx)
  fractionLengths <- fractionLength(grl, tx_len)
  insertTable(data.table(fractionLengths = fractionLengths), "fractionLengths")
  # inFrameCDS
  inFrameCDS <- ORFik:::isInFrame(distORFCDS)
  insertTable(data.table(inFrameCDS = inFrameCDS), "inFrameCDS")
  # isOverlappingCds
  isOverlappingCds <- isOverlapping(distORFCDS)
  insertTable(data.table(isOverlappingCds = isOverlappingCds), "isOverlappingCds")
  # rankInTx
  rankInTx <- rankOrder(grl)

  insertTable(data.table(rankInTx = rankInTx), "rankInTx")
  # number of uorfs per tx
  txNames <- txNames(grl)
  numberOfUorfsPerTx <- S4Vectors::Rle(txNames)
  insertTable(data.table(nUorfs = runLength(numberOfUorfsPerTx)), "numberOfUorfsPerTx")
  # start codon
  starts <- startCodons(grl, is.sorted = T)
  seqs <- ORFik:::txSeqsFromFa(starts, fa, TRUE, FALSE)
  insertTable(data.table(startCodon = seqs), "StartCodons")
  # stop codon
  stops <- stopCodons(grl, is.sorted = TRUE)
  seqs <- ORFik:::txSeqsFromFa(stops, fa, TRUE, FALSE)
  insertTable(data.table(stopCodon = seqs), "StopCodons")
  # Stop codon grouping
  insertTable(data.table(stopCodonGrouping = uniqueOrder(stops)), "stopCodonGrouping")
  # exon-exon junctions
  eej <- numExonsPerGroup(fiveUTRs, TRUE)
  link <- readTable("linkORFsToTx")
  eej <- as.integer(eej[link$txNames])
  insertTable(data.table(eej = eej), "exon-exonJunctionsLeader")
  eejuORF <- numExonsPerGroup(grl, )
  insertTable(data.table(eejuORF = eejuORF), "exon-exonJunctionsuORFs")
  # gc content
  gc <- gcContent(grl, fa)
  insertTable(data.table(gc = gc), "gcContent")

  # Gene information
  uORFomePipe:::getGTF(); insertTable <- uORFomePipe:::insertTable
  # gene transcript connections
  dt <- data.table(txNames = txNames(grl), geneNames = ORFik:::txNamesToGeneNames(txNames(grl), Gtf))
  insertTable(dt, "uORFTxToGene")
  # Gene to symbol
  insertTable(uORFomePipe:::getAllORFGeneSymbols(dt$geneNames, biomart), "geneSymbols")
  # go Terms
  uorfGo <- uORFomePipe:::getORFsGoTerms(dt$geneNames, organism)
  insertTable(data.table(go = uorfGo), "goTerms")
  return(invisible(NULL))
}

#' Get Ribo-seq features
#'
#' Excluding ones that uses RNA-seq normalizations
#' @param df.rfp ORFik experiment
#' @param grl the ORFs as GRangesList
#' @param preName name to pre append in database for each feature
#' @return NULL (features saved to database)
getGeneralRiboFeatures <- function(df.rfp, grl, preName = "") {
  if (tableNotExists(p(preName, "ioScore"))) {
    message("Finding Ribo-seq features from uORFs")
    uORFomePipe:::getAll()
    startRegion <- startRegion(grl, tx, T, -3, 9)

    paths <- filepath(df.rfp, "bedo")
    libs <-bplapply(paths,
                    function(x, grl, fiveUTRs, threeUTRs, cds, startRegion) {
                      RFP <- fimport(x)
                      return(ORFik:::allFeaturesHelper(grl, RFP, RNA = NULL, tx, fiveUTRs, cds , threeUTRs,
                                                       faFile = NULL, riboStart = 26, riboStop = 34,
                                                       sequenceFeatures = FALSE, grl.is.sorted = TRUE,
                                                       weight.RFP = "score", weight.RNA = 1L,
                                                       st = startRegion))
                    }, grl = grl, fiveUTRs = fiveUTRs, threeUTRs = threeUTRs, cds = cds, startRegion = startRegion)

    allRiboFeatures <- setDT(unlist(libs, recursive = FALSE))
    for(f in unique(colnames(allRiboFeatures))) { # Create one table per feature in DB
      featu <-  allRiboFeatures[, which(colnames(allRiboFeatures) == f), with = F]
      colnames(featu) <- paste0(f,"_", 1:ncol(featu))
      insertTable(data.table(featu), p(preName, f))
    }
  } else {
    print("AllFeaturesFromUorfs exists in DB (ioScore), delete and run again if you want new")
  }
}
