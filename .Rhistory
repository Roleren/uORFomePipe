orfikDirs(mainPath = "/export/valenfs/projects/Hakon/uORFome_zebrafish",
df.rfp, df.rna, df.cage, force.remake = FALSE)
rm(list=ls8)
rm(list=ls())
devtools::document(pkg = "/export/valenfs/projects/uORFome/RCode1/uORFomePipe/")
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Libraries needed
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
if (requireNamespace("uORFomePipe")) {
library(uORFomePipe)
} else if (requireNamespace("devtools")) {
devtools::install_github("Roleren/uORFomePipe", dependencies = TRUE)
library(uORFomePipe)
} else stop("Install devtools to install uORFomePipe from github")
#devtools::document(pkg = "/export/valenfs/projects/uORFome/RCode1/uORFomePipe/")
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Create experiments (1. CAGE, 2. Ribo-seq (RFP) and 3. RNA-seq (RNA))
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
if (0) {
library(ORFikPipeline) # This is a package I made for library preparation, others just use create.experiment from ORFik.
# CAGE
create.experimentl(dir = "/export/valenfs/data/processed_data/CAGE/nepal_2013_zebrafish/final_results/aligned_GRCz10", exper = "zf_nepal")
df.cage <- read.experimentl("zf_nepal")
ORFik:::simpleLibs(df.cage, addScoreColumn = TRUE, addSizeColumn = FALSE, method = "5prime"); remove.experiments(df.cage)
# RFP
create.experimentl(dir = "/export/valenfs/data/processed_data/Ribo-seq/chew_2013_zebrafish/final_results/aligned_GRCz10/", exper = "zf_Chew13", type = "bam")
df.rfp <- read.experimentl("zf_Chew13")
ORFik:::shiftFootprintsByExperiment(df.rfp, output_format = "bedo", accepted.lengths = 25:30)
# RNA
create.experimentl(dir = "/export/valenfs/data/processed_data/RNA-seq/chew_2013_and_pauli_2012_zebrafish/final_results/aligned_GRCz10/sorted", exper = "zf_Chew_RNA")
df.rna <- read.experimentl("zf_Chew_RNA")
ORFik:::simpleLibs(df.rna, addScoreColumn = TRUE, addSizeColumn = FALSE); remove.experiments(df.rna)
}
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INIT (START HERE)
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
{ # This part will vary according to what your experiments looks like, here I pick 3 stages to use
# Load experiments
library(ORFikPipeline) # This is a package I made for library preparation, others just use create.experiment from ORFik.
df.cage <- read.experimentl("zf_nepal")
df.rfp  <- read.experimentl("zf_Chew13")
df.rna  <- read.experimentl("zf_Chew_RNA")
# Subset experiments to stages / tissues we want analysed (they must exist in all 3)
conditions <- c("", NA)
stages <- c("Dome","Shield", "2to4Cell", "fertilized")
df.rfp <- df.rfp[df.rfp$stage %in% stages & df.rfp$condition %in% conditions,]
df.rna <- df.rna[df.rna$stage %in% stages & df.rna$condition %in% conditions,]
df.cage <- df.cage[df.cage$stage %in% stages & df.cage$condition %in% conditions,]; df.cage[1,2] <- df.rna$stage[1]
orfikDirs(mainPath = "/export/valenfs/projects/Hakon/uORFome_zebrafish",
df.rfp, df.rna, df.cage, force.remake = FALSE)
}
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# 2. Find uORF search region per CAGE
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
getLeadersFromCage(df.cage)
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# 3. Find candidate uORFs per CAGE
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
getCandidateuORFs(startCodons = "ATG|CTG|TTG|GTG|AAG|AGG|ACG|ATC|ATA|ATT")
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# 4. make uorf IDs (to get unique identifier per uORF)
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
getIDsFromUorfs()
makeTrainingAndPredictionData(df.rfp, df.rna, tissue = "all",
organism = "Danio rerio", biomart = "drerio_gene_ensembl")
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# 5. CAGE atlas per tissue and uORF / cage leader objects
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
createCatalogueDB(df.cage)
makeTrainingAndPredictionData(df.rfp, df.rna, tissue = "all",
organism = "Danio rerio", biomart = "drerio_gene_ensembl")
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# 7. Predict uORFs
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Either split tissues, or use argument "all" for all combined
prediction <- predictUorfs(tissues = "all")
# CAGE usage analysis
predictionVsCageHits()
cageTissues <- readTable("tissueAtlasByCage", with.IDs = FALSE)
cageRed <- cageTissues[, colSums(cageTissues) > 0, with = F]
inAll <- sum(rowSums(cageRed) == ncol(cageRed))
bestNames <- names(sort(-colSums(cageRed)))[1:min(20, ncol(cageRed))]
cageRed <- cageRed[,bestNames, with = F]
values <- c(colSums(cageRed) - inAll, rep(inAll, ncol(cageRed)))
variable <- c(rep(colnames(cageRed), 2))
type <- c(rep("Unique uORFs tissue", ncol(cageRed)), rep("uORFs in all tissues", ncol(cageRed)))
df <- data.table(value = values, variable, type)
df <- df[order(value),]
df$variable <- factor(df$variable, levels = unique(df$variable), ordered = T)
cageAll <- ggplot(df, aes(x=variable,y=value,fill=type)) +
geom_bar(stat="identity", position="stack") +
xlab("Tissue")+ylab("Number of uORFs found by CAGE") +
theme(axis.text.y = element_text(size = 10)) +
guides(fill=FALSE) +
coord_flip() +
labs(title="Number of candidate uORFs per tissue")
# for prediction
cageTissuesPrediction <- readTable("tissueAtlasByCageAndPred", with.IDs = FALSE)
inAll <- sum(rowSums(cageTissuesPrediction) == ncol(cageTissuesPrediction))
bestNames <- names(sort(-colSums(cageTissuesPrediction)))[1:min(20, ncol(cageRed))]
cageRed <- cageTissuesPrediction[,bestNames, with = F]
values <- c(colSums(cageRed) - inAll, rep(inAll, ncol(cageRed)))
variable <- c(rep(colnames(cageRed), 2))
type <- c(rep("Unique uORFs tissue", ncol(cageRed)), rep("uORFs in all tissues", ncol(cageRed)))
df <- data.table(value = values, variable, type)
df <- df[order(value),]
df$variable <- factor(df$variable, levels = unique(df$variable), ordered = T)
predAll <- ggplot(df, aes(x=variable, y=value, fill=type)) +
geom_bar(stat="identity", position="stack") +
scale_fill_discrete(name="uORF counts in final prediction") +
xlab("Tissue")+ylab("Number of predicted active uORFs") +
guides(fill=FALSE) +
theme(axis.text.y = element_text(size = 10)) +
coord_flip()
gridExtra:::arrangeGrob(cageAll, predAll, ncol = 2)
gridExtra:::arrangeGrob(cageAll, predAll, ncol = 2)
plot(gridExtra:::arrangeGrob(cageAll, predAll, ncol = 2))
gridExtra::grid.arrange(cageAll, predAll, ncol = 2)
cageTissues <- readTable("tissueAtlasByCage", with.IDs = FALSE)
cageTissues <- readTable("tissueAtlasByCage", with.IDs = FALSE)
cageRed <- cageTissues[, colSums(cageTissues) > 0, with = F]
inAll <- sum(rowSums(cageRed) == ncol(cageRed))
bestNames <- names(sort(-colSums(cageRed)))[1:min(20, ncol(cageRed))]
cageRed <- cageRed[,bestNames, with = F]
values <- c(colSums(cageRed) - inAll, rep(inAll, ncol(cageRed)))
variable <- c(rep(colnames(cageRed), 2))
type <- c(rep("Unique uORFs tissue", ncol(cageRed)), rep("uORFs in all tissues", ncol(cageRed)))
df <- data.table(value = values, variable, type)
df <- df[order(value),]
df$variable <- factor(df$variable, levels = unique(df$variable), ordered = T)
cageAll <- ggplot(df, aes(x=variable,y=value,fill=type)) +
geom_bar(stat="identity", position="stack") +
xlab("Tissue")+ylab("Number of uORFs found by CAGE") +
theme(axis.text.y = element_text(size = 10)) +
guides(fill=FALSE) +
coord_flip() +
labs(title="# candidate uORFs")
# for prediction
cageTissuesPrediction <- readTable("tissueAtlasByCageAndPred", with.IDs = FALSE)
inAll <- sum(rowSums(cageTissuesPrediction) == ncol(cageTissuesPrediction))
bestNames <- names(sort(-colSums(cageTissuesPrediction)))[1:min(20, ncol(cageRed))]
cageRed <- cageTissuesPrediction[,bestNames, with = F]
values <- c(colSums(cageRed) - inAll, rep(inAll, ncol(cageRed)))
variable <- c(rep(colnames(cageRed), 2))
type <- c(rep("Unique uORFs tissue", ncol(cageRed)), rep("uORFs in all tissues", ncol(cageRed)))
df <- data.table(value = values, variable, type)
df <- df[order(value),]
df$variable <- factor(df$variable, levels = unique(df$variable), ordered = T)
predAll <- ggplot(df, aes(x=variable, y=value, fill=type)) +
geom_bar(stat="identity", position="stack") +
scale_fill_discrete(name="uORF counts in final prediction") +
xlab("Tissue")+ylab("# predicted active uORFs") +
guides(fill=FALSE) +
theme(axis.text.y = element_text(size = 10)) +
coord_flip()
gridExtra::grid.arrange(cageAll, predAll, ncol = 2)
cageTissues <- readTable("tissueAtlasByCage", with.IDs = FALSE)
cageRed <- cageTissues[, colSums(cageTissues) > 0, with = F]
inAll <- sum(rowSums(cageRed) == ncol(cageRed))
bestNames <- names(sort(-colSums(cageRed)))[1:min(20, ncol(cageRed))]
cageRed <- cageRed[,bestNames, with = F]
values <- c(colSums(cageRed) - inAll, rep(inAll, ncol(cageRed)))
variable <- c(rep(colnames(cageRed), 2))
type <- c(rep("Unique uORFs tissue", ncol(cageRed)), rep("uORFs in all tissues", ncol(cageRed)))
df <- data.table(value = values, variable, type)
df <- df[order(value),]
df$variable <- factor(df$variable, levels = unique(df$variable), ordered = T)
cageAll <- ggplot(df, aes(x=variable,y=value,fill=type)) +
geom_bar(stat="identity", position="stack") +
xlab("Tissue")+ylab("# uORFs found by CAGE") +
theme(axis.text.y = element_text(size = 10)) +
guides(fill=FALSE) +
coord_flip()
# for prediction
cageTissuesPrediction <- readTable("tissueAtlasByCageAndPred", with.IDs = FALSE)
inAll <- sum(rowSums(cageTissuesPrediction) == ncol(cageTissuesPrediction))
bestNames <- names(sort(-colSums(cageTissuesPrediction)))[1:min(20, ncol(cageRed))]
cageRed <- cageTissuesPrediction[,bestNames, with = F]
values <- c(colSums(cageRed) - inAll, rep(inAll, ncol(cageRed)))
variable <- c(rep(colnames(cageRed), 2))
type <- c(rep("Unique uORFs tissue", ncol(cageRed)), rep("uORFs in all tissues", ncol(cageRed)))
df <- data.table(value = values, variable, type)
df <- df[order(value),]
df$variable <- factor(df$variable, levels = unique(df$variable), ordered = T)
predAll <- ggplot(df, aes(x=variable, y=value, fill=type)) +
geom_bar(stat="identity", position="stack") +
scale_fill_discrete(name="uORF counts in final prediction") +
xlab("Tissue")+ylab("# predicted active uORFs") +
guides(fill=FALSE) +
theme(axis.text.y = element_text(size = 10)) +
coord_flip()
gridExtra::grid.arrange(cageAll, predAll, ncol = 2)
gridExtra::grid.arrange(A = cageAll, B = predAll, ncol = 2)
A
gridExtra::grid.arrange(top = "uORF prediction", cageAll, predAll, ncol = 2)
cageTissuesPrediction <- readTable("tissueAtlasByCageAndPred", with.IDs = FALSE)
cageTissuesPrediction
uorfData <- getAllSequenceFeaturesTable()
starts <- factor(uorfData$StartCodons)
table(starts)
startAndStop <- data.table(StartCodons = factor(uorfData$StartCodons),
StopCodons = factor(uorfData$StopCodons),
prediction = cageTissuesPrediction$X2to4Cell == 1)
startAndStop
sum(startAndStop$prediction)
ggplot(data = startAndStop, aes(StartCodons)) +
geom_bar()
ggplot(data = startAndStop, aes(StartCodons)) +
geom_bar(width = 0.1)
startAndStop <- data.table(StartCodons = factor(uorfData$StartCodons),
StopCodons = factor(uorfData$StopCodons),
prediction = cageTissuesPrediction$X2to4Cell == 1)
ggplot(data = startAndStop, aes(StartCodons)) +
geom_bar(width = 0.2)
startAndStopCodonPlots <- function() {
cageTissuesPrediction <- readTable("tissueAtlasByCageAndPred", with.IDs = FALSE)
uorfData <- getAllSequenceFeaturesTable()
startAndStop <- data.table(StartCodons = factor(uorfData$StartCodons),
StopCodons = factor(uorfData$StopCodons),
prediction = cageTissuesPrediction$X2to4Cell == 1)
ggplot(data = startAndStop, aes(StartCodons)) +
geom_bar(width = 0.3)
}
ggplot(data = startAndStop, aes(StartCodons)) +
geom_bar(width = 0.3)
startPredicted <- ggplot(data = startAndStop[prediction,], aes(StartCodons)) +
geom_bar(width = 0.3)
startPredicted <- ggplot(data = startAndStop[prediction == TRUE,], aes(StartCodons)) +
geom_bar(width = 0.3)
startPredicted
gridExtra::grid.arrange(startCandidates, startPredicted, stopCandidates,
stopPredicted, ncol = 2)
startCandidates <- ggplot(data = startAndStop, aes(StartCodons)) +
geom_bar(width = 0.3)
startPredicted <- ggplot(data = startAndStop[prediction == TRUE,], aes(StartCodons)) +
geom_bar(width = 0.3)
stopCandidates <- ggplot(data = startAndStop, aes(StopCodons)) +
geom_bar(width = 0.3)
stopPredicted <- ggplot(data = startAndStop[prediction == TRUE,], aes(StopCodons)) +
geom_bar(width = 0.3)
gridExtra::grid.arrange(startCandidates, startPredicted, stopCandidates,
stopPredicted, ncol = 2)
unique(startAndStop$StopCodons)
unique(uorfData$StopCodons)
uorfData <- getAllSequenceFeaturesTable()
unique(uorfData$StopCodons)
table(uorfData$StopCodons)
a <- gridExtra::grid.arrange(startCandidates, startPredicted, stopCandidates,
stopPredicted, ncol = 2)
a
gridExtra::grid.arrange(top = "uORF prediction", a, cageAll, predAll, ncol = 2)
codons <- gridExtra::grid.arrange(startCandidates, startPredicted, stopCandidates,
stopPredicted, ncol = 2)
rm(a)
gridExtra::grid.arrange(pred, codons, ncol = 1)
pred <- gridExtra::grid.arrange(top = "uORF prediction", cageAll, predAll, ncol = 2)
gridExtra::grid.arrange(pred, codons, ncol = 1)
reads <- fimport(filepath(df.rfp[1,]))
reads <- fimport(filepath(df.rfp[1,], "pshifted"))
grl = uORFomePipe:::getUorfsInDb()
grlCov <- metaWindow(reads, grl, scoring = NULL,
feature = "uORF", fraction = "Ribo-seq")
windowCoveragePlot(grlCov, scoring = "zscore", title = "Ribo-seq metaplot")
# Heatmaps
txNames <- filterTranscripts(df.rfp, 100, 100 , 100)
loadRegions(df.rfp, names.keep = txNames)
seqlevelsStyle(df.rfp)
seqlevelsStyle(loadTxdb(df.rfp))
hitMap <- windowPerReadLength(grl, mrna, reads, pShifted = TRUE)
grl
hitMap <- windowPerReadLength(grl[txNames(grl) %in% names(mrna)], mrna, reads, pShifted = TRUE)
mrna <- uORFomePipe:::getCageTx()
cageLeaders <- uORFomePipe:::leaderCage(FALSE)
min(widthPerGroup(cageLeaders))
mrna <- extendLeaders(uORFomePipe:::getCageTx(), 30)
uORFomePipe:::getCageTx()
uORFomePipe:::getCageTx()
mrna <- extendLeaders(cageTx, 30)
cageTx
mrna <- extendLeaders(tx, 30)
hitMap <- windowPerReadLength(grl[txNames(grl) %in% names(mrna)], mrna, reads, pShifted = TRUE)
coverageHeatMap(hitMap)
coverageHeatMap(hitMap, addFracPlot = TRUE)
hitMap
hitMap <- windowPerReadLength(grl[txNames(grl) %in% names(mrna)], mrna, reads, pShifted = TRUE, upstream = 5, downstream = 5)
coverageHeatMap(hitMap, addFracPlot = TRUE)
startCodonMetrics(prediction)
prediction
startCodonMetrics(prediction$prediction)
grlCov <- metaWindow(reads, grl, scoring = NULL,
feature = "uORF", fraction = "Ribo-seq", upstream = 0, downstream = 5)
grlStart <- startRegion(grl,tx, upstream = 0, downstream = 5)
grlCov <- metaWindow(reads, grlStart, scoring = NULL,
feature = "uORF", fraction = "Ribo-seq")
pSitePlot(grlCov)
grlStart <- startRegion(grl,tx, upstream = 5, downstream = 5)
grlCov <- metaWindow(reads, grlStart, scoring = NULL,
feature = "uORF", fraction = "Ribo-seq", withFrames = TRUE, zeroPosition = 5)
pSitePlot(grlCov)
a <- readRDS(uorfFolder, "/02_fertilized_egg.bedo.uorf.rds")
a <- readRDS(p(uorfFolder, "/02_fertilized_egg.bedo.uorf.rds"))
a
grl
stops <- stopCodons(a, TRUE)
table(ORFik:::txSeqsFromFa(stops, faiName))
table(ORFik:::txSeqsFromFa(stops, faiName, keep.names = F))
table(ORFik:::txSeqsFromFa(stops, faiName, keep.names = F, is.sorted = T))
ss <- ORFik:::txSeqsFromFa(stops, faiName, keep.names = F, is.sorted = T)
any(ss == "AAA")
grl(which(ss = "AAA"))
a[which(ss = "AAA")]
a[which(ss == "AAA")]
system.time(groupings(grl))
system.time(ORFik:::groupings(grl))
head(ORFik:::groupings(grl))
grl
grl <- a
minus <- !strandBool(grl)
minGrl <- grl[minus & numExonsPerGroup(grl) > 1]
minGrl
minGrl[[1]]
start(minGrl)
start(minGrl[1])
as.integer(start(minGrl[1]))
as.integer(start(minGrl[[1]]))
start(minGrl[[1]])
start(minGrl[[1]])
start(minGrl[[1]])[1] > start(minGrl[[1]])[2]
start(minGrl[[1]])[1] < start(minGrl[[1]])[2]
start(minGrl[[1]])[1] > start(minGrl[[1]])[2]
rm(list=ls())
updateORFik()
devtools::document(pkg = "/export/valenfs/projects/uORFome/RCode1/uORFomePipe/")
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Libraries needed
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
if (requireNamespace("uORFomePipe")) {
library(uORFomePipe)
} else if (requireNamespace("devtools")) {
devtools::install_github("Roleren/uORFomePipe", dependencies = TRUE)
library(uORFomePipe)
} else stop("Install devtools to install uORFomePipe from github")
#devtools::document(pkg = "/export/valenfs/projects/uORFome/RCode1/uORFomePipe/")
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Create experiments (1. CAGE, 2. Ribo-seq (RFP) and 3. RNA-seq (RNA))
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
if (0) {
library(ORFikPipeline) # This is a package I made for library preparation, others just use create.experiment from ORFik.
# CAGE
create.experimentl(dir = "/export/valenfs/data/processed_data/CAGE/nepal_2013_zebrafish/final_results/aligned_GRCz10", exper = "zf_nepal")
df.cage <- read.experimentl("zf_nepal")
ORFik:::simpleLibs(df.cage, addScoreColumn = TRUE, addSizeColumn = FALSE, method = "5prime"); remove.experiments(df.cage)
# RFP
create.experimentl(dir = "/export/valenfs/data/processed_data/Ribo-seq/chew_2013_zebrafish/final_results/aligned_GRCz10/", exper = "zf_Chew13", type = "bam")
df.rfp <- read.experimentl("zf_Chew13")
ORFik:::shiftFootprintsByExperiment(df.rfp, output_format = "bedo", accepted.lengths = 25:30)
# RNA
create.experimentl(dir = "/export/valenfs/data/processed_data/RNA-seq/chew_2013_and_pauli_2012_zebrafish/final_results/aligned_GRCz10/sorted", exper = "zf_Chew_RNA")
df.rna <- read.experimentl("zf_Chew_RNA")
ORFik:::simpleLibs(df.rna, addScoreColumn = TRUE, addSizeColumn = FALSE); remove.experiments(df.rna)
}
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INIT (START HERE)
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
{ # This part will vary according to what your experiments looks like, here I pick 3 stages to use
# Load experiments
library(ORFikPipeline) # This is a package I made for library preparation, others just use create.experiment from ORFik.
df.cage <- read.experimentl("zf_nepal")
df.rfp  <- read.experimentl("zf_Chew13") # RNA-seq is optional, but makes results better
df.rna  <- read.experimentl("zf_Chew_RNA")
# Subset experiments to stages / tissues we want analysed (they must exist in all 3)
conditions <- c("", NA)
stages <- c("Dome","Shield", "2to4Cell", "fertilized")
df.rfp <- df.rfp[df.rfp$stage %in% stages & df.rfp$condition %in% conditions,]
df.rna <- df.rna[df.rna$stage %in% stages & df.rna$condition %in% conditions,]
df.cage <- df.cage[df.cage$stage %in% stages & df.cage$condition %in% conditions,]; df.cage[1,2] <- df.rna$stage[1]
orfikDirs(mainPath = "/export/valenfs/projects/Hakon/uORFome_zebrafish",
df.rfp, df.rna, df.cage)
}
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Libraries needed
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
if (requireNamespace("uORFomePipe")) {
library(uORFomePipe)
} else if (requireNamespace("devtools")) {
devtools::install_github("Roleren/uORFomePipe", dependencies = TRUE)
library(uORFomePipe)
} else stop("Install devtools to install uORFomePipe from github")
#devtools::document(pkg = "/export/valenfs/projects/uORFome/RCode1/uORFomePipe/")
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Create experiments (1. CAGE, 2. Ribo-seq (RFP) and 3. RNA-seq (RNA))
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
if (0) {
library(ORFikPipeline) # This is a package I made for library preparation, others just use create.experiment from ORFik.
# CAGE
create.experimentl(dir = "/export/valenfs/data/processed_data/CAGE/nepal_2013_zebrafish/final_results/aligned_GRCz10", exper = "zf_nepal")
df.cage <- read.experimentl("zf_nepal")
ORFik:::simpleLibs(df.cage, addScoreColumn = TRUE, addSizeColumn = FALSE, method = "5prime"); remove.experiments(df.cage)
# RFP
create.experimentl(dir = "/export/valenfs/data/processed_data/Ribo-seq/chew_2013_zebrafish/final_results/aligned_GRCz10/", exper = "zf_Chew13", type = "bam")
df.rfp <- read.experimentl("zf_Chew13")
ORFik:::shiftFootprintsByExperiment(df.rfp, output_format = "bedo", accepted.lengths = 25:30)
# RNA
create.experimentl(dir = "/export/valenfs/data/processed_data/RNA-seq/chew_2013_and_pauli_2012_zebrafish/final_results/aligned_GRCz10/sorted", exper = "zf_Chew_RNA")
df.rna <- read.experimentl("zf_Chew_RNA")
ORFik:::simpleLibs(df.rna, addScoreColumn = TRUE, addSizeColumn = FALSE); remove.experiments(df.rna)
}
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INIT (START HERE)
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
{ # This part will vary according to what your experiments looks like, here I pick 3 stages to use
# Load experiments
library(ORFikPipeline) # This is a package I made for library preparation, others just use create.experiment from ORFik.
df.cage <- read.experimentl("zf_nepal")
df.rfp  <- read.experimentl("zf_Chew13") # RNA-seq is optional, but makes results better
df.rna  <- read.experimentl("zf_Chew_RNA")
# Subset experiments to stages / tissues we want analysed (they must exist in all 3)
conditions <- c("", NA)
stages <- c("Dome","Shield", "2to4Cell", "fertilized")
df.rfp <- df.rfp[df.rfp$stage %in% stages & df.rfp$condition %in% conditions,]
df.rna <- df.rna[df.rna$stage %in% stages & df.rna$condition %in% conditions,]
df.cage <- df.cage[df.cage$stage %in% stages & df.cage$condition %in% conditions,]; df.cage[1,2] <- df.rna$stage[1]
orfikDirs(mainPath = "/export/valenfs/projects/Hakon/uORFome_zebrafish",
df.rfp, df.rna, df.cage)
}
devtools::document(pkg = "/export/valenfs/projects/uORFome/RCode1/uORFomePipe/")
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Libraries needed
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
if (requireNamespace("uORFomePipe")) {
library(uORFomePipe)
} else if (requireNamespace("devtools")) {
devtools::install_github("Roleren/uORFomePipe", dependencies = TRUE)
library(uORFomePipe)
} else stop("Install devtools to install uORFomePipe from github")
#devtools::document(pkg = "/export/valenfs/projects/uORFome/RCode1/uORFomePipe/")
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# Create experiments (1. CAGE, 2. Ribo-seq (RFP) and 3. RNA-seq (RNA))
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
if (0) {
library(ORFikPipeline) # This is a package I made for library preparation, others just use create.experiment from ORFik.
# CAGE
create.experimentl(dir = "/export/valenfs/data/processed_data/CAGE/nepal_2013_zebrafish/final_results/aligned_GRCz10", exper = "zf_nepal")
df.cage <- read.experimentl("zf_nepal")
ORFik:::simpleLibs(df.cage, addScoreColumn = TRUE, addSizeColumn = FALSE, method = "5prime"); remove.experiments(df.cage)
# RFP
create.experimentl(dir = "/export/valenfs/data/processed_data/Ribo-seq/chew_2013_zebrafish/final_results/aligned_GRCz10/", exper = "zf_Chew13", type = "bam")
df.rfp <- read.experimentl("zf_Chew13")
ORFik:::shiftFootprintsByExperiment(df.rfp, output_format = "bedo", accepted.lengths = 25:30)
# RNA
create.experimentl(dir = "/export/valenfs/data/processed_data/RNA-seq/chew_2013_and_pauli_2012_zebrafish/final_results/aligned_GRCz10/sorted", exper = "zf_Chew_RNA")
df.rna <- read.experimentl("zf_Chew_RNA")
ORFik:::simpleLibs(df.rna, addScoreColumn = TRUE, addSizeColumn = FALSE); remove.experiments(df.rna)
}
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# INIT (START HERE)
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
{ # This part will vary according to what your experiments looks like, here I pick 3 stages to use
# Load experiments
library(ORFikPipeline) # This is a package I made for library preparation, others just use create.experiment from ORFik.
df.cage <- read.experimentl("zf_nepal")
df.rfp  <- read.experimentl("zf_Chew13") # RNA-seq is optional, but makes results better
df.rna  <- read.experimentl("zf_Chew_RNA")
# Subset experiments to stages / tissues we want analysed (they must exist in all 3)
conditions <- c("", NA)
stages <- c("Dome","Shield", "2to4Cell", "fertilized")
df.rfp <- df.rfp[df.rfp$stage %in% stages & df.rfp$condition %in% conditions,]
df.rna <- df.rna[df.rna$stage %in% stages & df.rna$condition %in% conditions,]
df.cage <- df.cage[df.cage$stage %in% stages & df.cage$condition %in% conditions,]; df.cage[1,2] <- df.rna$stage[1]
orfikDirs(mainPath = "/export/valenfs/projects/Hakon/uORFome_zebrafish",
df.rfp, df.rna, df.cage)
}
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# 2. Find uORF search region per CAGE
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
getLeadersFromCage(df.cage)
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
# 3. Find candidate uORFs per CAGE
#¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤#
getCandidateuORFs(startCodons = "ATG|CTG|TTG|GTG|AAG|AGG|ACG|ATC|ATA|ATT")
a <- readRDS(p(uorfFolder, "/02_fertilized_egg.bedo.uorf.rds"))
stops <- stopCodons(a, TRUE)
table(ORFik:::txSeqsFromFa(stops, faiName, keep.names = F, is.sorted = T))
1
1
1
hh <- which(!strandBool(a) & numExonsPerGroup(a, FALSE) > 1)
head(aa)
head(hh)
grl[hh]
a[hh]
a[hh]
stops[hh]
stopSeqs <- ORFik:::txSeqsFromFa(stops, faiName, keep.names = F, is.sorted = T)
stopSeqs[hh]
table(stopSeqs[hh])
table(stopSeqs)
hhh <- which(stopSeqs == "AAA")
head(hhh)
a[hhh]
stops[hhh]
system.time(lastExonPerGroup(a))
rm(list=ls8)
rm(list=ls())
updateORFik()
1
quit()
quit()
devtools::document(pkg = "/export/valenfs/projects/uORFome/RCode1/uORFomePipe/")
devtools::document(pkg = "/export/valenfs/projects/uORFome/RCode1/uORFomePipe/")
devtools::document(pkg = "/export/valenfs/projects/uORFome/RCode1/uORFomePipe/")
devtools::document(pkg = "/export/valenfs/projects/uORFome/RCode1/uORFomePipe/")
